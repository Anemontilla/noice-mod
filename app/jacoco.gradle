// https://github.com/dampcake/Robolectric-JaCoCo-Sample/blob/master/jacoco.gradle

apply plugin: 'jacoco'

jacoco {
  // https://search.maven.org/artifact/org.jacoco/jacoco-maven-plugin
  toolVersion = '0.8.7'
}

android {
  testOptions {
    unitTests.all {
      jacoco {
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*']
      }
    }
  }
}

project.afterEvaluate {

  android.productFlavors.all { flavor ->
    def variant = "${flavor.name}Debug"
    def taskName = "test${variant.capitalize()}Coverage"
    def testTask = "test${variant.capitalize()}UnitTest"
    tasks.create(name: "${taskName}", type: JacocoReport, dependsOn: "${testTask}") {
      group = 'Reporting'
      description = "Generate Jacoco coverage reports for the ${flavor.name} debug build variant."

      def sourceDirs = ['src/main/java'] + android.sourceSets[variant].java.srcDirs
      def execDataFile = "${project.buildDir}/jacoco/${testTask}.exec"
      def classFiles = fileTree(
        dir: "${project.buildDir}/tmp/kotlin-classes/${variant}",
        excludes: ['**/R.class',
                   '**/R$*.class',
                   '**/*$ViewInjector*.*',
                   '**/*$ViewBinder*.*',
                   '**/BuildConfig.*',
                   '**/Manifest*.*']
      )

      sourceDirectories.setFrom(files(sourceDirs))
      executionData.setFrom(files(execDataFile))
      classDirectories.setFrom(classFiles)

      reports {
        xml.required = true
        xml.destination file("${project.buildDir}/reports/jacoco/${taskName}/report.xml")
        html.required = true
      }
    }
  }

  tasks.create(name: 'testDebugCoverage', type: JacocoReport) {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports for the all debug build variants.'

    android.productFlavors.all { flavor ->
      dependsOn "test${flavor.name.capitalize()}DebugCoverage"
    }
  }
}
